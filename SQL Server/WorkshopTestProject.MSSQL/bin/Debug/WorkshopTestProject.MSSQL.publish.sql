/*
Deployment script for WorkshopTestProjectDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WorkshopTestProjectDb"
:setvar DefaultFilePrefix "WorkshopTestProjectDb"
:setvar DefaultDataPath "C:\Users\map\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\map\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Schema [core]...';


GO
CREATE SCHEMA [core]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating User-Defined Table Type [core].[TinyintArray]...';


GO
CREATE TYPE [core].[TinyintArray] AS TABLE (
    [val] TINYINT NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [core].[SmallintArray]...';


GO
CREATE TYPE [core].[SmallintArray] AS TABLE (
    [val] SMALLINT NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [core].[RealArray]...';


GO
CREATE TYPE [core].[RealArray] AS TABLE (
    [val] REAL NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [core].[NVarcharArray]...';


GO
CREATE TYPE [core].[NVarcharArray] AS TABLE (
    [val] NVARCHAR (MAX) NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [core].[IntArray]...';


GO
CREATE TYPE [core].[IntArray] AS TABLE (
    [val] INT NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [core].[FloatArray]...';


GO
CREATE TYPE [core].[FloatArray] AS TABLE (
    [val] FLOAT (53) NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [core].[DecimalArray]...';


GO
CREATE TYPE [core].[DecimalArray] AS TABLE (
    [val] DECIMAL (18) NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [core].[BigintArray]...';


GO
CREATE TYPE [core].[BigintArray] AS TABLE (
    [val] BIGINT NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [core].[VarcharArray]...';


GO
CREATE TYPE [core].[VarcharArray] AS TABLE (
    [val] VARCHAR (MAX) NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [core].[UniqueidentifierArray]...';


GO
CREATE TYPE [core].[UniqueidentifierArray] AS TABLE (
    [val] UNIQUEIDENTIFIER NOT NULL);


GO
PRINT N'Creating Table [core].[DomainType_Hist]...';


GO
CREATE TABLE [core].[DomainType_Hist] (
    [Hist_Id]      BIGINT         IDENTITY (1, 1) NOT NULL,
    [Hist_Action]  CHAR (1)       NOT NULL,
    [Hist_Date]    DATETIME2 (7)  NOT NULL,
    [Id]           BIGINT         NULL,
    [ModifiedDate] DATETIME2 (7)  NULL,
    [ModifiedUser] BIGINT         NULL,
    [Type]         NVARCHAR (50)  NULL,
    [Description]  NVARCHAR (MAX) NULL,
    [Mode]         CHAR (1)       NULL,
    [StandardId]   BIGINT         NULL,
    [Editable]     BIGINT         NULL,
    CONSTRAINT [pkDomainType_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[DomainType_Hist].[ndx_core_DomainType_Hist_DomainTypeId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_DomainType_Hist_DomainTypeId]
    ON [core].[DomainType_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Table [core].[Currency_Hist]...';


GO
CREATE TABLE [core].[Currency_Hist] (
    [Hist_Id]       BIGINT         IDENTITY (1, 1) NOT NULL,
    [Hist_Action]   CHAR (1)       NOT NULL,
    [Hist_Date]     DATETIME2 (7)  NOT NULL,
    [Id]            BIGINT         NULL,
    [ModifiedDate]  DATETIME2 (7)  NULL,
    [ModifiedUser]  BIGINT         NULL,
    [Iso]           NVARCHAR (3)   NULL,
    [Currency]      NVARCHAR (200) NULL,
    [CurrencyParts] NVARCHAR (200) NULL,
    [Region]        NVARCHAR (200) NULL,
    CONSTRAINT [pkCurrency_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[Currency_Hist].[ndx_core_Currency_Hist_CurrencyId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_Currency_Hist_CurrencyId]
    ON [core].[Currency_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Table [core].[Country_Hist]...';


GO
CREATE TABLE [core].[Country_Hist] (
    [Hist_Id]      BIGINT         IDENTITY (1, 1) NOT NULL,
    [Hist_Action]  CHAR (1)       NOT NULL,
    [Hist_Date]    DATETIME2 (7)  NOT NULL,
    [Id]           BIGINT         NULL,
    [ModifiedDate] DATETIME2 (7)  NULL,
    [ModifiedUser] BIGINT         NULL,
    [Country]      NVARCHAR (100) NULL,
    [CountryKey]   NVARCHAR (3)   NULL,
    [CurrencyId]   BIGINT         NULL,
    CONSTRAINT [pkCountry_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[Country_Hist].[ndx_core_Country_Hist_CountryId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_Country_Hist_CountryId]
    ON [core].[Country_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Table [core].[UserRightsRole]...';


GO
CREATE TABLE [core].[UserRightsRole] (
    [Id]           BIGINT          IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate] DATETIME2 (7)   NOT NULL,
    [ModifiedUser] BIGINT          NOT NULL,
    [Role]         NVARCHAR (1000) NOT NULL,
    [Description]  NVARCHAR (4000) NOT NULL,
    CONSTRAINT [pk_CoreUserRightsRole_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF),
    CONSTRAINT [ucUserRightsRoleRole] UNIQUE NONCLUSTERED ([Role] ASC)
);


GO
PRINT N'Creating Index [core].[UserRightsRole].[ix_coreUserRightsRole_ModifiedUser]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreUserRightsRole_ModifiedUser]
    ON [core].[UserRightsRole]([ModifiedUser] ASC);


GO
PRINT N'Creating Table [core].[UserRight]...';


GO
CREATE TABLE [core].[UserRight] (
    [Id]           BIGINT          IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate] DATETIME2 (7)   NOT NULL,
    [ModifiedUser] BIGINT          NOT NULL,
    [Right]        NVARCHAR (1000) NOT NULL,
    [Description]  NVARCHAR (4000) NOT NULL,
    CONSTRAINT [pk_CoreUserRight_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF),
    CONSTRAINT [ucUserRightRight] UNIQUE NONCLUSTERED ([Right] ASC)
);


GO
PRINT N'Creating Index [core].[UserRight].[ix_coreUserRight_ModifiedUser]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreUserRight_ModifiedUser]
    ON [core].[UserRight]([ModifiedUser] ASC);


GO
PRINT N'Creating Table [core].[UserGroup]...';


GO
CREATE TABLE [core].[UserGroup] (
    [Id]           BIGINT          IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate] DATETIME2 (7)   NOT NULL,
    [ModifiedUser] BIGINT          NOT NULL,
    [Group]        NVARCHAR (1000) NOT NULL,
    [Description]  NVARCHAR (4000) NOT NULL,
    CONSTRAINT [pk_CoreUserGroup_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF),
    CONSTRAINT [ucUserGroupGroup] UNIQUE NONCLUSTERED ([Group] ASC)
);


GO
PRINT N'Creating Index [core].[UserGroup].[ix_coreUserGroup_ModifiedUser]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreUserGroup_ModifiedUser]
    ON [core].[UserGroup]([ModifiedUser] ASC);


GO
PRINT N'Creating Table [core].[Currency]...';


GO
CREATE TABLE [core].[Currency] (
    [Id]            BIGINT         IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate]  DATETIME2 (7)  NOT NULL,
    [ModifiedUser]  BIGINT         NOT NULL,
    [Iso]           NVARCHAR (3)   NOT NULL,
    [Currency]      NVARCHAR (200) NOT NULL,
    [CurrencyParts] NVARCHAR (200) NOT NULL,
    [Region]        NVARCHAR (200) NOT NULL,
    CONSTRAINT [pk_CoreCurrency_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[Currency].[ix_coreCurrency_ModifiedUser]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreCurrency_ModifiedUser]
    ON [core].[Currency]([ModifiedUser] ASC);


GO
PRINT N'Creating Table [core].[Country]...';


GO
CREATE TABLE [core].[Country] (
    [Id]           BIGINT         IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate] DATETIME2 (7)  NOT NULL,
    [ModifiedUser] BIGINT         NOT NULL,
    [Country]      NVARCHAR (100) NOT NULL,
    [CountryKey]   NVARCHAR (3)   NULL,
    [CurrencyId]   BIGINT         NULL,
    CONSTRAINT [pk_CoreCountry_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[Country].[ix_coreCountry_ModifiedUser]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreCountry_ModifiedUser]
    ON [core].[Country]([ModifiedUser] ASC);


GO
PRINT N'Creating Index [core].[Country].[ix_coreCountry_CurrencyId]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreCountry_CurrencyId]
    ON [core].[Country]([CurrencyId] ASC);


GO
PRINT N'Creating Table [core].[Tenant]...';


GO
CREATE TABLE [core].[Tenant] (
    [Id]           BIGINT          IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate] DATETIME2 (7)   NOT NULL,
    [ModifiedUser] BIGINT          NOT NULL,
    [TenantName]   NVARCHAR (200)  NOT NULL,
    [Description]  NVARCHAR (4000) NOT NULL,
    CONSTRAINT [pk_CoreTenant_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[Tenant].[ix_coreTenant_ModifiedUser]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreTenant_ModifiedUser]
    ON [core].[Tenant]([ModifiedUser] ASC);


GO
PRINT N'Creating Table [core].[DomainValue]...';


GO
CREATE TABLE [core].[DomainValue] (
    [Id]           BIGINT          IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate] DATETIME2 (7)   NOT NULL,
    [ModifiedUser] BIGINT          NOT NULL,
    [TypeId]       BIGINT          NOT NULL,
    [ValueC]       NVARCHAR (400)  NULL,
    [ValueN]       BIGINT          NULL,
    [ValueD]       DATETIME2 (7)   NULL,
    [ValueF]       FLOAT (53)      NULL,
    [DivId]        NVARCHAR (MAX)  NULL,
    [Description]  NVARCHAR (4000) NOT NULL,
    [Unit]         NVARCHAR (100)  NULL,
    [TenantId]     BIGINT          NOT NULL,
    CONSTRAINT [pk_CoreDomainValue_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[DomainValue].[ix_coreDomainValue_ModifiedUser]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreDomainValue_ModifiedUser]
    ON [core].[DomainValue]([ModifiedUser] ASC);


GO
PRINT N'Creating Index [core].[DomainValue].[ix_coreDomainValue_TypeId]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreDomainValue_TypeId]
    ON [core].[DomainValue]([TypeId] ASC);


GO
PRINT N'Creating Index [core].[DomainValue].[ix_coreDomainValue_TenantId]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreDomainValue_TenantId]
    ON [core].[DomainValue]([TenantId] ASC);


GO
PRINT N'Creating Table [core].[User]...';


GO
CREATE TABLE [core].[User] (
    [Id]                    BIGINT           IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate]          DATETIME2 (7)    NOT NULL,
    [ModifiedUser]          BIGINT           NOT NULL,
    [TenantId]              BIGINT           NOT NULL,
    [Login]                 NVARCHAR (255)   NOT NULL,
    [Password]              NVARCHAR (255)   NOT NULL,
    [PasswordSalt]          NVARCHAR (255)   NOT NULL,
    [Email]                 NVARCHAR (800)   NOT NULL,
    [State]                 BIGINT           NOT NULL,
    [FailedLoginCount]      BIGINT           NOT NULL,
    [LastLogin]             DATETIME2 (7)    NULL,
    [LastPasswordChange]    DATETIME2 (7)    NULL,
    [DomainLogin]           NVARCHAR (60)    NOT NULL,
    [BusinessPartnerId]     BIGINT           NOT NULL,
    [ConditionsId]          BIGINT           NOT NULL,
    [ConditionsFixed]       BIGINT           NOT NULL,
    [PrivacyPolicyId]       BIGINT           NOT NULL,
    [PrivacyPolicyFixed]    BIGINT           NOT NULL,
    [PasswordLinkExtension] UNIQUEIDENTIFIER NULL,
    [PasswordDateOfExpiry]  DATETIME2 (7)    NULL,
    [NewEmail]              NVARCHAR (800)   NULL,
    [EmailLinkExtension]    UNIQUEIDENTIFIER NULL,
    [EmailDateOfExpiry]     DATETIME2 (7)    NULL,
    CONSTRAINT [pk_CoreUser_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF),
    CONSTRAINT [uc_CoreUser_Email] UNIQUE NONCLUSTERED ([Email] ASC),
    CONSTRAINT [ucUserLogin] UNIQUE NONCLUSTERED ([Login] ASC)
);


GO
PRINT N'Creating Index [core].[User].[ix_coreUser_ModifiedUser]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreUser_ModifiedUser]
    ON [core].[User]([ModifiedUser] ASC);


GO
PRINT N'Creating Index [core].[User].[ix_coreUser_TenantId]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreUser_TenantId]
    ON [core].[User]([TenantId] ASC);


GO
PRINT N'Creating Index [core].[User].[ix_coreUser_State]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreUser_State]
    ON [core].[User]([State] ASC);


GO
PRINT N'Creating Index [core].[User].[ix_coreUser_BusinessPartnerId]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreUser_BusinessPartnerId]
    ON [core].[User]([BusinessPartnerId] ASC);


GO
PRINT N'Creating Index [core].[User].[ix_coreUser_PasswordLinkExtension]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreUser_PasswordLinkExtension]
    ON [core].[User]([PasswordLinkExtension] ASC);


GO
PRINT N'Creating Index [core].[User].[ix_coreUser_EmailLinkExtension]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreUser_EmailLinkExtension]
    ON [core].[User]([EmailLinkExtension] ASC);


GO
PRINT N'Creating Table [core].[DomainType]...';


GO
CREATE TABLE [core].[DomainType] (
    [Id]           BIGINT         IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate] DATETIME2 (7)  NOT NULL,
    [ModifiedUser] BIGINT         NOT NULL,
    [Type]         NVARCHAR (50)  NOT NULL,
    [Description]  NVARCHAR (MAX) NOT NULL,
    [Mode]         CHAR (1)       NOT NULL,
    [StandardId]   BIGINT         NULL,
    [Editable]     BIGINT         NOT NULL,
    CONSTRAINT [pk_CoreDomainType_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[DomainType].[ix_coreDomainType_ModifiedUser]...';


GO
CREATE NONCLUSTERED INDEX [ix_coreDomainType_ModifiedUser]
    ON [core].[DomainType]([ModifiedUser] ASC);


GO
PRINT N'Creating Table [core].[Stock_Hist]...';


GO
CREATE TABLE [core].[Stock_Hist] (
    [Hist_Id]      BIGINT        IDENTITY (1, 1) NOT NULL,
    [Hist_Action]  CHAR (1)      NOT NULL,
    [Hist_Date]    DATETIME2 (7) NOT NULL,
    [Id]           BIGINT        NULL,
    [ModifiedDate] DATETIME2 (7) NULL,
    [ModifiedUser] BIGINT        NULL,
    [ProductId]    BIGINT        NULL,
    [Quantity]     BIGINT        NULL,
    CONSTRAINT [pkStock_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[Stock_Hist].[ndx_core_Stock_Hist_StockId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_Stock_Hist_StockId]
    ON [core].[Stock_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Table [core].[Product_Hist]...';


GO
CREATE TABLE [core].[Product_Hist] (
    [Hist_Id]      BIGINT         IDENTITY (1, 1) NOT NULL,
    [Hist_Action]  CHAR (1)       NOT NULL,
    [Hist_Date]    DATETIME2 (7)  NOT NULL,
    [Id]           BIGINT         NULL,
    [ModifiedDate] DATETIME2 (7)  NULL,
    [ModifiedUser] BIGINT         NULL,
    [ProductName]  NVARCHAR (200) NULL,
    [Price]        FLOAT (53)     NULL,
    CONSTRAINT [pkProduct_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[Product_Hist].[ndx_core_Product_Hist_ProductId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_Product_Hist_ProductId]
    ON [core].[Product_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Table [core].[Product]...';


GO
CREATE TABLE [core].[Product] (
    [Id]           BIGINT         IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate] DATETIME2 (7)  NOT NULL,
    [ModifiedUser] BIGINT         NOT NULL,
    [ProductName]  NVARCHAR (200) NOT NULL,
    [Price]        FLOAT (53)     NOT NULL,
    CONSTRAINT [pk_CoreProduct_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Table [core].[Stock]...';


GO
CREATE TABLE [core].[Stock] (
    [Id]           BIGINT        IDENTITY (1000000, 1) NOT NULL,
    [ModifiedDate] DATETIME2 (7) NOT NULL,
    [ModifiedUser] BIGINT        NOT NULL,
    [ProductId]    BIGINT        NOT NULL,
    [Quantity]     BIGINT        NOT NULL,
    CONSTRAINT [pk_CoreStock_Id] PRIMARY KEY CLUSTERED ([Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Table [core].[UserRightsRole_Hist]...';


GO
CREATE TABLE [core].[UserRightsRole_Hist] (
    [Hist_Id]      BIGINT          IDENTITY (1, 1) NOT NULL,
    [Hist_Action]  CHAR (1)        NOT NULL,
    [Hist_Date]    DATETIME2 (7)   NOT NULL,
    [Id]           BIGINT          NULL,
    [ModifiedDate] DATETIME2 (7)   NULL,
    [ModifiedUser] BIGINT          NULL,
    [Role]         NVARCHAR (1000) NULL,
    [Description]  NVARCHAR (4000) NULL,
    CONSTRAINT [pkUserRightsRole_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[UserRightsRole_Hist].[ndx_core_UserRightsRole_Hist_UserRightsRoleId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_UserRightsRole_Hist_UserRightsRoleId]
    ON [core].[UserRightsRole_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Table [core].[UserRight_Hist]...';


GO
CREATE TABLE [core].[UserRight_Hist] (
    [Hist_Id]      BIGINT          IDENTITY (1, 1) NOT NULL,
    [Hist_Action]  CHAR (1)        NOT NULL,
    [Hist_Date]    DATETIME2 (7)   NOT NULL,
    [Id]           BIGINT          NULL,
    [ModifiedDate] DATETIME2 (7)   NULL,
    [ModifiedUser] BIGINT          NULL,
    [Right]        NVARCHAR (1000) NULL,
    [Description]  NVARCHAR (4000) NULL,
    CONSTRAINT [pkUserRight_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[UserRight_Hist].[ndx_core_UserRight_Hist_UserRightId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_UserRight_Hist_UserRightId]
    ON [core].[UserRight_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Table [core].[UserGroup_Hist]...';


GO
CREATE TABLE [core].[UserGroup_Hist] (
    [Hist_Id]      BIGINT          IDENTITY (1, 1) NOT NULL,
    [Hist_Action]  CHAR (1)        NOT NULL,
    [Hist_Date]    DATETIME2 (7)   NOT NULL,
    [Id]           BIGINT          NULL,
    [ModifiedDate] DATETIME2 (7)   NULL,
    [ModifiedUser] BIGINT          NULL,
    [Group]        NVARCHAR (1000) NULL,
    [Description]  NVARCHAR (4000) NULL,
    CONSTRAINT [pkUserGroup_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[UserGroup_Hist].[ndx_core_UserGroup_Hist_UserGroupId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_UserGroup_Hist_UserGroupId]
    ON [core].[UserGroup_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Table [core].[User_Hist]...';


GO
CREATE TABLE [core].[User_Hist] (
    [Hist_Id]               BIGINT           IDENTITY (1, 1) NOT NULL,
    [Hist_Action]           CHAR (1)         NOT NULL,
    [Hist_Date]             DATETIME2 (7)    NOT NULL,
    [Id]                    BIGINT           NULL,
    [ModifiedDate]          DATETIME2 (7)    NULL,
    [ModifiedUser]          BIGINT           NULL,
    [TenantId]              BIGINT           NULL,
    [Login]                 NVARCHAR (255)   NULL,
    [Password]              NVARCHAR (255)   NULL,
    [PasswordSalt]          NVARCHAR (255)   NULL,
    [Email]                 NVARCHAR (800)   NULL,
    [State]                 BIGINT           NULL,
    [FailedLoginCount]      BIGINT           NULL,
    [LastLogin]             DATETIME2 (7)    NULL,
    [LastPasswordChange]    DATETIME2 (7)    NULL,
    [DomainLogin]           NVARCHAR (60)    NULL,
    [BusinessPartnerId]     BIGINT           NULL,
    [ConditionsId]          BIGINT           NULL,
    [ConditionsFixed]       BIGINT           NULL,
    [PrivacyPolicyId]       BIGINT           NULL,
    [PrivacyPolicyFixed]    BIGINT           NULL,
    [PasswordLinkExtension] UNIQUEIDENTIFIER NULL,
    [PasswordDateOfExpiry]  DATETIME2 (7)    NULL,
    [NewEmail]              NVARCHAR (800)   NULL,
    [EmailLinkExtension]    UNIQUEIDENTIFIER NULL,
    [EmailDateOfExpiry]     DATETIME2 (7)    NULL,
    CONSTRAINT [pkUser_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[User_Hist].[ndx_core_User_Hist_UserId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_User_Hist_UserId]
    ON [core].[User_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Table [core].[Tenant_Hist]...';


GO
CREATE TABLE [core].[Tenant_Hist] (
    [Hist_Id]      BIGINT          IDENTITY (1, 1) NOT NULL,
    [Hist_Action]  CHAR (1)        NOT NULL,
    [Hist_Date]    DATETIME2 (7)   NOT NULL,
    [Id]           BIGINT          NULL,
    [ModifiedDate] DATETIME2 (7)   NULL,
    [ModifiedUser] BIGINT          NULL,
    [TenantName]   NVARCHAR (200)  NULL,
    [Description]  NVARCHAR (4000) NULL,
    CONSTRAINT [pkTenant_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[Tenant_Hist].[ndx_core_Tenant_Hist_TenantId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_Tenant_Hist_TenantId]
    ON [core].[Tenant_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Table [core].[DomainValue_Hist]...';


GO
CREATE TABLE [core].[DomainValue_Hist] (
    [Hist_Id]      BIGINT          IDENTITY (1, 1) NOT NULL,
    [Hist_Action]  CHAR (1)        NOT NULL,
    [Hist_Date]    DATETIME2 (7)   NOT NULL,
    [Id]           BIGINT          NULL,
    [ModifiedDate] DATETIME2 (7)   NULL,
    [ModifiedUser] BIGINT          NULL,
    [TypeId]       BIGINT          NULL,
    [ValueC]       NVARCHAR (400)  NULL,
    [ValueN]       BIGINT          NULL,
    [ValueD]       DATETIME2 (7)   NULL,
    [ValueF]       FLOAT (53)      NULL,
    [DivId]        NVARCHAR (MAX)  NULL,
    [Description]  NVARCHAR (4000) NULL,
    [Unit]         NVARCHAR (100)  NULL,
    [TenantId]     BIGINT          NULL,
    CONSTRAINT [pkDomainValue_Hist_Id] PRIMARY KEY CLUSTERED ([Hist_Id] DESC) WITH (ALLOW_PAGE_LOCKS = OFF)
);


GO
PRINT N'Creating Index [core].[DomainValue_Hist].[ndx_core_DomainValue_Hist_DomainValueId]...';


GO
CREATE NONCLUSTERED INDEX [ndx_core_DomainValue_Hist_DomainValueId]
    ON [core].[DomainValue_Hist]([Id] ASC)
    ON [PRIMARY];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUserRightsRole_Description]...';


GO
ALTER TABLE [core].[UserRightsRole]
    ADD CONSTRAINT [dv_CoreUserRightsRole_Description] DEFAULT '' FOR [Description];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUserRight_Description]...';


GO
ALTER TABLE [core].[UserRight]
    ADD CONSTRAINT [dv_CoreUserRight_Description] DEFAULT '' FOR [Description];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUserGroup_Description]...';


GO
ALTER TABLE [core].[UserGroup]
    ADD CONSTRAINT [dv_CoreUserGroup_Description] DEFAULT '' FOR [Description];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreCurrency_CurrencyParts]...';


GO
ALTER TABLE [core].[Currency]
    ADD CONSTRAINT [dv_CoreCurrency_CurrencyParts] DEFAULT '' FOR [CurrencyParts];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreCurrency_Region]...';


GO
ALTER TABLE [core].[Currency]
    ADD CONSTRAINT [dv_CoreCurrency_Region] DEFAULT '' FOR [Region];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreCountry_Country]...';


GO
ALTER TABLE [core].[Country]
    ADD CONSTRAINT [dv_CoreCountry_Country] DEFAULT '' FOR [Country];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreTenant_Description]...';


GO
ALTER TABLE [core].[Tenant]
    ADD CONSTRAINT [dv_CoreTenant_Description] DEFAULT '' FOR [Description];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreDomainValue_Description]...';


GO
ALTER TABLE [core].[DomainValue]
    ADD CONSTRAINT [dv_CoreDomainValue_Description] DEFAULT '' FOR [Description];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUser_Login]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [dv_CoreUser_Login] DEFAULT '' FOR [Login];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUser_Password]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [dv_CoreUser_Password] DEFAULT '' FOR [Password];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUser_PasswordSalt]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [dv_CoreUser_PasswordSalt] DEFAULT '' FOR [PasswordSalt];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUser_State]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [dv_CoreUser_State] DEFAULT (376) FOR [State];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUser_DomainLogin]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [dv_CoreUser_DomainLogin] DEFAULT ('') FOR [DomainLogin];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUser_ConditionsId]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [dv_CoreUser_ConditionsId] DEFAULT (0) FOR [ConditionsId];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUser_ConditionsFixed]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [dv_CoreUser_ConditionsFixed] DEFAULT (0) FOR [ConditionsFixed];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUser_PrivacyPolicyId]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [dv_CoreUser_PrivacyPolicyId] DEFAULT (0) FOR [PrivacyPolicyId];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreUser_PrivacyPolicyFixed]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [dv_CoreUser_PrivacyPolicyFixed] DEFAULT (0) FOR [PrivacyPolicyFixed];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreDomainType_Description]...';


GO
ALTER TABLE [core].[DomainType]
    ADD CONSTRAINT [dv_CoreDomainType_Description] DEFAULT '' FOR [Description];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreDomainType_Mode]...';


GO
ALTER TABLE [core].[DomainType]
    ADD CONSTRAINT [dv_CoreDomainType_Mode] DEFAULT 'C' FOR [Mode];


GO
PRINT N'Creating Default Constraint [core].[dv_CoreDomainType_Editable]...';


GO
ALTER TABLE [core].[DomainType]
    ADD CONSTRAINT [dv_CoreDomainType_Editable] DEFAULT (0) FOR [Editable];


GO
PRINT N'Creating Foreign Key [core].[fk_CoreUserRightsRole_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[UserRightsRole]
    ADD CONSTRAINT [fk_CoreUserRightsRole_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreUserRight_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[UserRight]
    ADD CONSTRAINT [fk_CoreUserRight_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreUserGroup_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[UserGroup]
    ADD CONSTRAINT [fk_CoreUserGroup_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreCurrency_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[Currency]
    ADD CONSTRAINT [fk_CoreCurrency_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreCountry_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[Country]
    ADD CONSTRAINT [fk_CoreCountry_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreCountry_CoreCurrency_CurrencyId]...';


GO
ALTER TABLE [core].[Country]
    ADD CONSTRAINT [fk_CoreCountry_CoreCurrency_CurrencyId] FOREIGN KEY ([CurrencyId]) REFERENCES [core].[Currency] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreTenant_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[Tenant]
    ADD CONSTRAINT [fk_CoreTenant_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreDomainValue_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[DomainValue]
    ADD CONSTRAINT [fk_CoreDomainValue_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreDomainValue_CoreDomainType_TypeId]...';


GO
ALTER TABLE [core].[DomainValue]
    ADD CONSTRAINT [fk_CoreDomainValue_CoreDomainType_TypeId] FOREIGN KEY ([TypeId]) REFERENCES [core].[DomainType] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreDomainValue_CoreTenant_TenantId]...';


GO
ALTER TABLE [core].[DomainValue]
    ADD CONSTRAINT [fk_CoreDomainValue_CoreTenant_TenantId] FOREIGN KEY ([TenantId]) REFERENCES [core].[Tenant] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreUser_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [fk_CoreUser_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreUser_CoreTenant_TenantId]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [fk_CoreUser_CoreTenant_TenantId] FOREIGN KEY ([TenantId]) REFERENCES [core].[Tenant] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fkUserDomainValuesState]...';


GO
ALTER TABLE [core].[User]
    ADD CONSTRAINT [fkUserDomainValuesState] FOREIGN KEY ([State]) REFERENCES [core].[DomainValue] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreDomainType_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[DomainType]
    ADD CONSTRAINT [fk_CoreDomainType_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreProduct_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[Product]
    ADD CONSTRAINT [fk_CoreProduct_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreStock_CoreUser_ModifiedUser]...';


GO
ALTER TABLE [core].[Stock]
    ADD CONSTRAINT [fk_CoreStock_CoreUser_ModifiedUser] FOREIGN KEY ([ModifiedUser]) REFERENCES [core].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [core].[fk_CoreStock_CoreProduct_ProductId]...';


GO
ALTER TABLE [core].[Stock]
    ADD CONSTRAINT [fk_CoreStock_CoreProduct_ProductId] FOREIGN KEY ([ProductId]) REFERENCES [core].[Product] ([Id]);


GO
PRINT N'Creating Trigger [core].[UserRightsRole_HistTrigger]...';


GO
CREATE TRIGGER [core].[UserRightsRole_HistTrigger]
  ON [core].[UserRightsRole]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[UserRightsRole] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Role]
            ,[Description]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Role]
            ,[Description]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[UserRightsRole] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[UserRightsRole_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Role]
            ,[Description]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[Role]
              ,[Description]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating Trigger [core].[UserRight_HistTrigger]...';


GO
CREATE TRIGGER [core].[UserRight_HistTrigger]
  ON [core].[UserRight]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[UserRight] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Right]
            ,[Description]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Right]
            ,[Description]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[UserRight] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[UserRight_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Right]
            ,[Description]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[Right]
              ,[Description]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating Trigger [core].[UserGroup_HistTrigger]...';


GO
CREATE TRIGGER [core].[UserGroup_HistTrigger]
  ON [core].[UserGroup]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[UserGroup] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Group]
            ,[Description]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Group]
            ,[Description]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[UserGroup] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[UserGroup_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Group]
            ,[Description]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[Group]
              ,[Description]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating Trigger [core].[Currency_HistTrigger]...';


GO
CREATE TRIGGER [core].[Currency_HistTrigger]
  ON [core].[Currency]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[Currency] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Iso]
            ,[Currency]
            ,[CurrencyParts]
            ,[Region]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Iso]
            ,[Currency]
            ,[CurrencyParts]
            ,[Region]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[Currency] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[Currency_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Iso]
            ,[Currency]
            ,[CurrencyParts]
            ,[Region]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[Iso]
              ,[Currency]
              ,[CurrencyParts]
              ,[Region]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating Trigger [core].[Country_HistTrigger]...';


GO
CREATE TRIGGER [core].[Country_HistTrigger]
  ON [core].[Country]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[Country] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Country]
            ,[CountryKey]
            ,[CurrencyId]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Country]
            ,[CountryKey]
            ,[CurrencyId]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[Country] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[Country_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Country]
            ,[CountryKey]
            ,[CurrencyId]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[Country]
              ,[CountryKey]
              ,[CurrencyId]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating Trigger [core].[Tenant_HistTrigger]...';


GO
CREATE TRIGGER [core].[Tenant_HistTrigger]
  ON [core].[Tenant]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[Tenant] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[TenantName]
            ,[Description]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[TenantName]
            ,[Description]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[Tenant] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[Tenant_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[TenantName]
            ,[Description]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[TenantName]
              ,[Description]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating Trigger [core].[DomainValue_HistTrigger]...';


GO
CREATE TRIGGER [core].[DomainValue_HistTrigger]
  ON [core].[DomainValue]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[DomainValue] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[TypeId]
            ,[ValueC]
            ,[ValueN]
            ,[ValueD]
            ,[ValueF]
            ,[DivId]
            ,[Description]
            ,[Unit]
            ,[TenantId]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[TypeId]
            ,[ValueC]
            ,[ValueN]
            ,[ValueD]
            ,[ValueF]
            ,[DivId]
            ,[Description]
            ,[Unit]
            ,[TenantId]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[DomainValue] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[DomainValue_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[TypeId]
            ,[ValueC]
            ,[ValueN]
            ,[ValueD]
            ,[ValueF]
            ,[DivId]
            ,[Description]
            ,[Unit]
            ,[TenantId]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[TypeId]
              ,[ValueC]
              ,[ValueN]
              ,[ValueD]
              ,[ValueF]
              ,[DivId]
              ,[Description]
              ,[Unit]
              ,[TenantId]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating Trigger [core].[User_HistTrigger]...';


GO
CREATE TRIGGER [core].[User_HistTrigger]
  ON [core].[User]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[User] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[TenantId]
            ,[Login]
            ,[Password]
            ,[PasswordSalt]
            ,[Email]
            ,[State]
            ,[FailedLoginCount]
            ,[LastLogin]
            ,[LastPasswordChange]
            ,[DomainLogin]
            ,[BusinessPartnerId]
            ,[ConditionsId]
            ,[ConditionsFixed]
            ,[PrivacyPolicyId]
            ,[PrivacyPolicyFixed]
            ,[PasswordLinkExtension]
            ,[PasswordDateOfExpiry]
            ,[NewEmail]
            ,[EmailLinkExtension]
            ,[EmailDateOfExpiry]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[TenantId]
            ,[Login]
            ,[Password]
            ,[PasswordSalt]
            ,[Email]
            ,[State]
            ,[FailedLoginCount]
            ,[LastLogin]
            ,[LastPasswordChange]
            ,[DomainLogin]
            ,[BusinessPartnerId]
            ,[ConditionsId]
            ,[ConditionsFixed]
            ,[PrivacyPolicyId]
            ,[PrivacyPolicyFixed]
            ,[PasswordLinkExtension]
            ,[PasswordDateOfExpiry]
            ,[NewEmail]
            ,[EmailLinkExtension]
            ,[EmailDateOfExpiry]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[User] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[User_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[TenantId]
            ,[Login]
            ,[Password]
            ,[PasswordSalt]
            ,[Email]
            ,[State]
            ,[FailedLoginCount]
            ,[LastLogin]
            ,[LastPasswordChange]
            ,[DomainLogin]
            ,[BusinessPartnerId]
            ,[ConditionsId]
            ,[ConditionsFixed]
            ,[PrivacyPolicyId]
            ,[PrivacyPolicyFixed]
            ,[PasswordLinkExtension]
            ,[PasswordDateOfExpiry]
            ,[NewEmail]
            ,[EmailLinkExtension]
            ,[EmailDateOfExpiry]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[TenantId]
              ,[Login]
              ,[Password]
              ,[PasswordSalt]
              ,[Email]
              ,[State]
              ,[FailedLoginCount]
              ,[LastLogin]
              ,[LastPasswordChange]
              ,[DomainLogin]
              ,[BusinessPartnerId]
              ,[ConditionsId]
              ,[ConditionsFixed]
              ,[PrivacyPolicyId]
              ,[PrivacyPolicyFixed]
              ,[PasswordLinkExtension]
              ,[PasswordDateOfExpiry]
              ,[NewEmail]
              ,[EmailLinkExtension]
              ,[EmailDateOfExpiry]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating Trigger [core].[DomainType_HistTrigger]...';


GO
CREATE TRIGGER [core].[DomainType_HistTrigger]
  ON [core].[DomainType]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[DomainType] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Type]
            ,[Description]
            ,[Mode]
            ,[StandardId]
            ,[Editable]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Type]
            ,[Description]
            ,[Mode]
            ,[StandardId]
            ,[Editable]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[DomainType] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[DomainType_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[Type]
            ,[Description]
            ,[Mode]
            ,[StandardId]
            ,[Editable]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[Type]
              ,[Description]
              ,[Mode]
              ,[StandardId]
              ,[Editable]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating Trigger [core].[Product_HistTrigger]...';


GO
CREATE TRIGGER [core].[Product_HistTrigger]
  ON [core].[Product]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[Product] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[ProductName]
            ,[Price]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[ProductName]
            ,[Price]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[Product] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[Product_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[ProductName]
            ,[Price]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[ProductName]
              ,[Price]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating Trigger [core].[Stock_HistTrigger]...';


GO
CREATE TRIGGER [core].[Stock_HistTrigger]
  ON [core].[Stock]
  FOR DELETE, INSERT, UPDATE
  AS
  BEGIN
    SET NOCOUNT ON
	  DECLARE @Action  NVARCHAR (50)

    --delete old temp table
    IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl

	-- insert affected rows from inserted table
	select * into #tmpTbl from (SELECT * FROM (SELECT * FROM inserted) AS A
					  							      ) AS T

	SET IDENTITY_INSERT [core].[Stock] OFF
	SET IDENTITY_INSERT #tmpTbl ON

    --update
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
      SET @Action = 'U'
    END

    --insert
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted)
    BEGIN
      SET @Action = 'I'
    END

    --delete
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted)
    BEGIN
      SET @Action = 'D'
      -- insert affected rows from deleted table
	    INSERT INTO #tmpTbl (
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[ProductId]
            ,[Quantity]
              ) SELECT
             [Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[ProductId]
            ,[Quantity]
        FROM deleted;
    END

    SET IDENTITY_INSERT #tmpTbl OFF
	SET IDENTITY_INSERT [core].[Stock] ON

    IF EXISTS(SELECT * FROM #tmpTbl)
      INSERT [core].[Stock_Hist](
             [Hist_Action]
             ,[Hist_Date]
            ,[Id]
            ,[ModifiedDate]
            ,[ModifiedUser]
            ,[ProductId]
            ,[Quantity]
             )
      SELECT  @Action
              ,SYSUTCDATETIME()
              ,[Id]
              ,[ModifiedDate]
              ,[ModifiedUser]
              ,[ProductId]
              ,[Quantity]
      FROM #tmpTbl

    --delete temp table
	IF OBJECT_ID('tempdb..#tmpTbl') IS NOT NULL DROP TABLE #tmpTbl
    SET NOCOUNT OFF
END
GO
PRINT N'Creating View [core].[ProductsInStock]...';


GO
CREATE VIEW [core].[ProductsInStock]
  AS 
  SELECT prod.Id
        ,prod.ProductName
        ,prod.Price
        ,stock.Quantity
    FROM [core].[Product] AS prod
   INNER JOIN [core].[Stock] AS stock ON stock.[ProductId] = prod.[Id]
GO
PRINT N'Creating Function [core].[GetInsertUpdateDeleteInformation]...';


GO
CREATE FUNCTION [core].[GetInsertUpdateDeleteInformation]
(
  @UserID bigint,
  @TimeStamp datetime2
)
RETURNS varchar(max) WITH SCHEMABINDING
AS
BEGIN
  -- Declare the return variable here
  DECLARE @GPName varchar(max);
  DECLARE @RET varchar(max);
  DECLARE @DateTime varchar(max);

  IF (@TimeStamp IS NOT NULL) BEGIN
    SET @DateTime = CAST(DAY(@TimeStamp) AS VARCHAR(2)) + '.' + CAST(MONTH(@TimeStamp) AS VARCHAR(2)) + '.' + CAST(YEAR(@TimeStamp) AS VARCHAR(4)) + ' - ' + CAST(DATEPART(hour, @TimeStamp) AS VARCHAR(2)) + ':' + FORMAT(DATEPART(minute, @TimeStamp), '00') + ':' + FORMAT(DATEPART(second, @TimeStamp), '00');
  END

  -- Add the T-SQL statements to compute the return value here
  SELECT @GPName = usr.Email
  FROM [core].[User] AS usr
  WHERE usr.Id = @UserID;

  SET @RET = '';
  IF (@GPName IS NULL AND @TimeStamp IS NULL) BEGIN
    SET @RET = '';
  END  
  IF (@GPName IS NOT NULL AND @TimeStamp IS NULL) BEGIN
    SET @RET = @GPName;
  END
  IF (@GPName IS NULL AND @TimeStamp IS NOT NULL) BEGIN
    SET @RET = CAST(@DateTime AS VARCHAR);
  END
  IF (@GPName IS NOT NULL AND @TimeStamp IS NOT NULL) BEGIN
    SET @RET = CAST(@DateTime AS VARCHAR) + ' von: ' + @GPName;
  END

  RETURN @RET

END
GO
PRINT N'Creating Function [core].[ProductInStock]...';


GO
CREATE FUNCTION [core].[ProductInStock]
(
  @productId BIGINT
)
RETURNS TABLE AS RETURN
(
  SELECT prod.Id
        ,prod.ProductName
        ,prod.Price
        ,stock.Quantity
    FROM [core].[Product] AS prod
   INNER JOIN [core].[Stock] AS stock ON stock.[ProductId] = prod.[Id]
   WHERE (@productId IS NULL OR prod.[Id] = @productId)
)
GO
PRINT N'Creating Function [core].[SpecialProducts]...';


GO
CREATE FUNCTION [core].[SpecialProducts]
(
  @productIds [core].[BigintArray] READONLY
)
RETURNS TABLE AS RETURN
(
  SELECT prod.Id
        ,prod.ProductName
        ,prod.Price
    FROM [core].[Product] AS prod
    WHERE ((NOT EXISTS(SELECT 1 FROM @productIds) OR prod.[Id] IN (SELECT [val] FROM @productIds)))
)
GO
PRINT N'Creating Procedure [core].[sp_ProductInStock]...';


GO
CREATE PROCEDURE [core].[sp_ProductInStock]
  @productId BIGINT
AS
BEGIN
  SELECT prod.Id
        ,prod.ProductName
        ,prod.Price
        ,stock.Quantity
    FROM [core].[Product] AS prod
   INNER JOIN [core].[Stock] AS stock ON stock.[ProductId] = prod.[Id]
   WHERE (@productId IS NULL OR prod.[Id] = @productId)
END
GO
PRINT N'Creating Extended Property [core].[Country].[Id].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Id der Währung', @level0type = N'SCHEMA', @level0name = N'core', @level1type = N'TABLE', @level1name = N'Country', @level2type = N'COLUMN', @level2name = N'Id';


GO
PRINT N'Creating Extended Property [core].[Country].[ModifiedDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Datum der letzten Änderung', @level0type = N'SCHEMA', @level0name = N'core', @level1type = N'TABLE', @level1name = N'Country', @level2type = N'COLUMN', @level2name = N'ModifiedDate';


GO
PRINT N'Creating Extended Property [core].[Country].[ModifiedUser].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Id des Benutzers der die letzte Änderung vorgenommen hat', @level0type = N'SCHEMA', @level0name = N'core', @level1type = N'TABLE', @level1name = N'Country', @level2type = N'COLUMN', @level2name = N'ModifiedUser';


GO
/*
Post-Deployment Script Template              
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.    
 Use SQLCMD syntax to include a file in the post-deployment script.      
 Example:      :r .\myfile.sql                
 Use SQLCMD syntax to reference a variable in the post-deployment script.    
 Example:      :setvar TableName MyTable              
               SELECT * FROM [$(TableName)]          
--------------------------------------------------------------------------------------
*/
/* Constraints ausschalten */
ALTER TABLE [core].[Country] NOCHECK CONSTRAINT ALL;
ALTER TABLE [core].[Currency] NOCHECK CONSTRAINT ALL;
ALTER TABLE [core].[DomainType] NOCHECK CONSTRAINT ALL;
ALTER TABLE [core].[DomainValue] NOCHECK CONSTRAINT ALL;
ALTER TABLE [core].[Product] NOCHECK CONSTRAINT ALL;
ALTER TABLE [core].[Stock] NOCHECK CONSTRAINT ALL;
ALTER TABLE [core].[Tenant] NOCHECK CONSTRAINT ALL;
ALTER TABLE [core].[User] NOCHECK CONSTRAINT ALL;
ALTER TABLE [core].[UserGroup] NOCHECK CONSTRAINT ALL;
ALTER TABLE [core].[UserRight] NOCHECK CONSTRAINT ALL;
ALTER TABLE [core].[UserRightsRole] NOCHECK CONSTRAINT ALL;
GO



/* core.DomainTypes hinzufügen */
SET IDENTITY_INSERT [core].[DomainType] ON;
MERGE INTO [core].[DomainType] AS Target 
USING (VALUES 
(2, 'Personentypen', 'Klassifikation von Geschäftspartnern (Person oder Firma)', 'C', NULL, 0),
(3, 'Anreden', 'Klassifikation von Anreden', 'C', 12, 0),
(4, 'Titel', 'Klassifikation von Titeln', 'C', 13, 0),
(63, 'Userstatus der Core.User Tabelle', '', 'N', 376, 0)
) 
AS Source (DovTypId, Type, Description, Mode, StandardId, Editable) 
ON Target.Id = Source.DovTypId 
WHEN NOT MATCHED BY TARGET THEN 
INSERT ([Id]
        ,[ModifiedDate]
        ,[ModifiedUser]
        ,[Type]
        ,[Description]
        ,[Mode]
        ,[StandardId]
        ,[Editable])
      VALUES
        (DovTypId
        ,'2021-11-19 00:00:00.0000'
        ,1
        ,Source.Type
        ,Source.Description
        ,Source.Mode
        ,Source.StandardId
        ,Source.Editable)
WHEN MATCHED THEN 
    UPDATE 
        SET [ModifiedDate] = '2021-11-19 00:00:00.0000'
          ,[ModifiedUser] = 1
          ,[Type] = Source.Type
          ,[Description] = Source.Description
          ,[Mode] = Source.Mode
          ,[StandardId] = Source.StandardId
          ,[Editable] = Source.Editable;
SET IDENTITY_INSERT [core].[DomainType] OFF;
/* core.DomainValues hinzufügen */
SET IDENTITY_INSERT [core].[DomainValue] ON;
MERGE INTO [core].[DomainValue] AS Target 
USING (VALUES 
(5, 2, 'Person', NULL, NULL, 'Person', 'Es handelt sich um eine natürliche Person!', NULL, 1),
(6, 2, 'Firma', NULL, NULL, 'Firma', 'Es handelt sich um eine Firma (juristische Person)!', NULL, 1),
(7, 2, 'System', NULL, NULL, 'System', 'Es handelt sich um den Systemuser (SysAdmin)!', NULL, 1),
(8, 3, 'Herr', 1, NULL, 'Herr', 'Anrede Herr', NULL, 1),
(9, 3, 'Frau', 2, NULL, 'Frau', 'Anrede Frau', NULL, 1),
(10, 3, 'Familie', 3, NULL, 'Familie', 'Anrede Familie', NULL, 1),
(11, 3, 'Firma', 4, NULL, 'Firma', 'Anrede Firma', NULL, 1),
(12, 3, 'ohne Anrede', 5, NULL, '', 'ohne Anrede', NULL, 1),
(13, 4, 'kein akademischer Titel', 0, NULL, '', 'kein akademischer Titel', NULL, 1),
(14, 4, 'Bachelor', 1, NULL, 'Bachelor', 'akademischer Titel Bachelor', NULL, 1),
(15, 4, 'Master', 2, NULL, 'Master', 'akademischer Titel Master', NULL, 1),
(22, 4, 'Dr.', 9, NULL, 'Dr.', 'akademischer Titel Dr.', NULL, 1),
(23, 4, 'Dr. Dr.', 10, NULL, 'Dr. Dr.', 'akademischer Titel Dr. Dr.', NULL, 1),
(24, 4, 'Dr. habil.', 11, NULL, 'Dr. habil.', 'akademischer Titel Dr. habil.', NULL, 1),
(25, 4, 'Privatdozent', 12, NULL, 'Privatdozent', 'akademischer Titel Dr. PD (habilitiert)', NULL, 1),
(26, 4, 'Prof.', 13, NULL, 'Prof.', 'akademischer Titel Professor', NULL, 1),
(27, 4, 'Prof. Dr.', 14, NULL, 'Prof. Dr.', 'akademischer Titel Prof. Dr.', NULL, 1),
(374, 63, 'Systemuser', NULL, NULL, '', '', NULL, 1),
(375, 63, 'Inaktiv', NULL, NULL, '', '', NULL, 1),
(376, 63, 'Aktiv', NULL, NULL, '', '', NULL, 1),
(377, 63, 'Gesperrt', NULL, NULL, '', '', NULL, 1)
)
AS Source (DovId, TypeId, ValueC, ValueN, ValueF, DivId, Description, Unit, TenantId) 
ON Target.Id = Source.DovId 
WHEN NOT MATCHED BY TARGET THEN 
INSERT ([Id]
        ,[ModifiedDate]
        ,[ModifiedUser]
        ,[TypeId]
        ,[ValueC]
        ,[ValueN]
        ,[ValueF]
        ,[DivId]
        ,[Description]
        ,[Unit]
        ,[TenantId])
VALUES (DovId
        ,'2021-11-19 00:00:00.0000'
        ,1
        ,Source.TypeId
        ,Source.ValueC
        ,Source.ValueN
        ,Source.ValueF
        ,Source.DivId
        ,Source.Description
        ,Source.Unit
        ,Source.TenantId)
WHEN MATCHED THEN 
    UPDATE 
        SET [ModifiedDate] = '2021-11-19 00:00:00.0000'
          ,[ModifiedUser] = 1
          ,[TypeId] = Source.TypeId
          ,[ValueC] = Source.ValueC
          ,[ValueN] = Source.ValueN
          ,[ValueF] = Source.ValueF
          ,[DivId] = Source.DivId
          ,[Description] = Source.Description
          ,[Unit] = Source.Unit
          ,[TenantId] = Source.TenantId;
SET IDENTITY_INSERT [core].[DomainValue] OFF;

/* core.Mandanten hinzufügen */
SET IDENTITY_INSERT [core].[Tenant] ON;
MERGE INTO [core].[Tenant] AS Target 
USING (VALUES 
(1, 'CurrentSystem 23 GmbH')
) 
AS Source (Id, TenantName) 
ON Target.Id = Source.Id 
WHEN NOT MATCHED BY TARGET THEN 
INSERT ([Id]
        ,[ModifiedDate]
        ,[ModifiedUser]
        ,[TenantName])
      VALUES
        (Id
        ,'2021-11-19 00:00:00.0000'
        ,1
        ,Source.TenantName)
WHEN MATCHED THEN 
    UPDATE 
        SET [ModifiedDate] = '2021-11-19 00:00:00.0000'
           ,[ModifiedUser] = 1
           ,[TenantName] = Source.TenantName;
SET IDENTITY_INSERT [core].[Tenant] OFF;
GO
/* core.User hinzufügen */
SET IDENTITY_INSERT [core].[User] ON;
MERGE INTO [core].[User] AS Target 
USING (VALUES 
(1, 'SYSTEM', '', '', '', '', 374, 0, NULL, NULL, '', 1, 0, 0, 0, 0, 1)
) 
AS Source (Id, Login, Password, PasswordSalt, PasswordPepper, Email, State, FailedLoginCount, LastLogin, LastPasswordChange, DomainLogin, BusinessPartnerId, ConditionsId, ConditionsFixed, PrivacyPolicyId, PrivacyPolicyFixed, TenantId) 
ON Target.Id = Source.Id 
WHEN NOT MATCHED BY TARGET THEN 
INSERT ([Id]
       ,[ModifiedDate]
       ,[ModifiedUser]
       ,[Login]
       ,[Password]
       ,[PasswordSalt]
       ,[Email]
       ,[State]
       ,[FailedLoginCount]
       ,[LastLogin]
       ,[LastPasswordChange]
       ,[DomainLogin]
       ,[BusinessPartnerId]
       ,[ConditionsId]
       ,[ConditionsFixed]
       ,[PrivacyPolicyId]
       ,[PrivacyPolicyFixed]
       ,[TenantId])
VALUES (Source.Id
        ,'2021-11-19 00:00:00.0000'
        ,1
        ,Source.Login
        ,Source.Password
        ,Source.PasswordSalt
        ,Source.Email
        ,Source.State
        ,Source.FailedLoginCount
        ,Source.LastLogin
        ,Source.LastPasswordChange
        ,Source.DomainLogin
        ,Source.BusinessPartnerId
        ,Source.ConditionsId
        ,Source.ConditionsFixed
        ,Source.PrivacyPolicyId
        ,Source.PrivacyPolicyFixed
        ,Source.TenantId        )
WHEN MATCHED THEN 
    UPDATE 
        SET [ModifiedDate] = '2021-11-19 00:00:00.0000'
          ,[ModifiedUser] = 1
          ,[Login] = Source.Login
          ,[Password] = Source.Password
          ,[PasswordSalt] = Source.PasswordSalt
          ,[Email] = Source.Email
          ,[State] = Source.State
          ,[FailedLoginCount] = Source.FailedLoginCount
          ,[LastLogin] = Source.LastLogin
          ,[LastPasswordChange] = Source.LastPasswordChange
          ,[DomainLogin] = Source.DomainLogin
          ,[BusinessPartnerId] = Source.BusinessPartnerId
          ,[ConditionsId] = Source.ConditionsId
          ,[ConditionsFixed] = Source.ConditionsFixed
          ,[PrivacyPolicyId] = Source.PrivacyPolicyId
          ,[PrivacyPolicyFixed] = Source.PrivacyPolicyFixed
          ,[TenantId] = Source.TenantId;
SET IDENTITY_INSERT [core].[User] OFF;
/* core.UserRight hinzufügen */
SET IDENTITY_INSERT [core].[UserRight] ON;
MERGE INTO [core].[UserRight] AS Target 
USING (VALUES 
(1, 'Systemmonitor', 'Berechtigung für Systemmonitor'),
(101, 'SeminarParticipantBookmarkGet', 'Lesezeichen eines Seminarteilnehmers laden'),
(102, 'SeminarParticipantBookmarkSave', 'Lesezeichen eines Seminarteilnehmers speichern'),
(103, 'SeminarParticipantBookmarkDelete', 'Lesezeichen eines Seminarteilnehmers löschen'),
(201, 'SeminarParticipantCourseRevGet', 'Kursrevision eines Seminarteilnehmers laden'),
(202, 'SeminarTrainerCourseRevGet', 'Kursrevision eines Seminartrainers laden'),
(203, 'SeminarCoordinatorCourseRevGet', 'Kursrevision eines Seminarkoordinators laden'),
(204, 'CompanyCoordinatorCourseRevGet', 'Kursrevision eines Firmenadministrators laden'),
(301, 'ProductGet', 'Produkt laden'),
(302, 'TechnicalCertificatePartGet', 'Teilzertifikat laden'),
(401, 'SeminarParticipantQuestionnaireGet', 'Fragebogen eines Seminarteilnehmers laden'),
(402, 'SeminarParticipantAnswerSave', 'Antwort eines Seminarteilnehmers speichern'),
(403, 'SeminarParticipantCourseRevStatusGet', 'Status eine Seminarteilnehmers in einer Kursrevision laden'),
(501, 'EmployeeInvite', 'Registrierungseinladung an Mitarbeiter verschicken'),
(601, 'UserGroupAssignmentGet', 'Zuordnung aller Benutzer zu ihren Benutzergruppe laden'),
(602, 'UserGroupAssignmentSave', 'Zuordnung eines beliebigen Benutzers zu einer Benutzergruppe speichern'),
(603, 'UserGroupAssignmentDelete', 'Zuordnung eines beliebigen Benutzers zu einer Benutzergruppe löschen'),
(604, 'UserGroupAssignmentGetOwn', 'Zuordnung der eigenen Benutzer zu ihren Benutzergruppe laden'),
(621, 'UserGroupGet', 'Benutzergruppen laden'),
(622, 'UserGroupSave', 'Neue Benutzergruppe anlegen'),
(623, 'UserGroupDelete', 'Benutzergruppe entfernen'),
(631, 'UserRoleAssignmentsGet', 'Rollenzuweisungen laden'),
(632, 'UserRoleAssignmentSave', 'Rollenzuweisungen anlegen'),
(633, 'UserRoleAssignmentDelete', 'Rollenzuweisungen entfernen'),
(641, 'UserRolesGet', 'Benutzerrollen laden'),
(642, 'UserRoleSave', 'Benutzerrollen anlegen'),
(643, 'UserRoleDelete', 'Benutzerrollen entfernen'),
(651, 'UserRightAssignmentsGet', 'Rechtezuweisungen laden'),
(652, 'UserRightAssignmentSave', 'Rechtezuweisungen anlegen'),
(653, 'UserRightAssignmentDelete', 'Rechtezuweisungen entfernen'),
(661, 'UserRightsGet', 'Benutzerrechte laden'),
(671, 'UnblockUser', 'Konto eines beliebigen Benutzers entsperren'),
(672, 'UnblockOwnUser', 'Konto eines untergeordneten Benutzers entsperren'),
(701, 'SeminarParticipantSeminarGet', 'Seminar eines Seminarteilnehmers laden'),
(702, 'AssignableSeminarGet', 'Seminar dem noch Teilnehmer zugewiesen werden können laden'),
(703, 'SeminarSave', 'Seminar speichern'),
(704, 'SeminarCoordinatorSeminarGet', 'Seminar eines Seminarkoordinators laden'),
(705, 'SeminarTrainerSeminarGet', 'Seminar eines Seminartrainers laden'),
(706, 'SeminarCompanyCoordinatorSeminarGet', 'Seminar eines Firmenadministrators laden'),
(711, 'SeminarAssignmentGet', 'Zuordnung eines Seminarteilnehmers zu einem Seminar laden'),
(712, 'SeminarAssignmentSave', 'Zuordnung eines Seminarteilnehmers zu einem Seminar speichern'),
(713, 'SeminarAssignmentDelete', 'Zuordnung eines Seminarteilnehmers zu einem Seminar löschen'),
(721, 'SeminarTrainerGet', 'Seminartrainer laden'),
(722, 'SeminarTrainerSave', 'Seminartrainer speichern'),
(723, 'SeminarTrainerDelete', 'Seminartrainer löschen'),
(731, 'SeminarRoomGet', 'Seminarraum laden'),
(732, 'SeminarRoomSave', 'Seminarraum speichern'),
(733, 'SeminarRoomDelete', 'Seminarraum löschen'),
(801, 'SlideGet', 'Folie laden'),
(901, 'EmailChange', 'E-Mail-Adresse des eigenen Benutzers ändern'),
(902, 'PasswortChange', 'Passwort des eigenen Benutzers ändern'),
(1001, 'SeminarParticipantCertificateGet', 'Zertifikat eines Seminarteilnehmers laden'),
(1002, 'SeminarParticipantPrintableCertificateGet', 'Druckbares Zertifikat eines Seminarteilnehmers laden'),
(1101, 'ContentManagement', 'Kurse, Fragen und Folien erstellen, löschen und ändern'),
(1201, 'TechnicalCertificateGet', 'Zertifikate laden'),
(1301, 'TechnicalCertificateToUserGet', 'Zertifikate - Nutzer Zuordnung laden'),
(1302, 'TechnicalCertificateToUserSave', 'Zertifikate - Nutzer Zuordnung speichern'),
(1303, 'TechnicalCertificateToUserDelete', 'Zertifikate - Nutzer Zuordnung löschen'),
(1401, 'BusinessPartnerGet', 'Business Partner laden'),
(1501, 'SelfDisclosure', 'DSGVO - Recht auf Selbstauskunft'),
(1502, 'ToBeForgotten', 'DSGVO - Recht auf Vergessenwerden'),
(1601, 'OrganizationChart', 'Recht auf Organigramm'),
(1650, 'DashboardEmployee', 'Recht auf Mitarbeiterdashboard'),
(1701, 'BusinessPartnerOwnerCertificateGet', 'Zertifikate aller Mitarbeitenden der Firma laden')
) 
AS Source ([Id], [Right], [Description]) 
ON Target.Id = Source.Id 
WHEN NOT MATCHED BY TARGET THEN 
INSERT ([Id]
       ,[ModifiedDate]
       ,[ModifiedUser]
       ,[Right]
       ,[Description])
VALUES (Source.Id
        ,'2021-11-19 00:00:00.0000'
        ,1
        ,Source.[Right]
        ,Source.[Description])
WHEN MATCHED THEN 
    UPDATE 
        SET [ModifiedDate] = '2021-11-19 00:00:00.0000'
          ,[ModifiedUser] = 1
          ,[Right] = Source.[Right]
          ,[Description] = Source.[Description];
SET IDENTITY_INSERT [core].[UserRight] OFF;
/* core.UserRightsRole hinzufügen */
SET IDENTITY_INSERT [core].[UserRightsRole] ON;
MERGE INTO [core].[UserRightsRole] AS Target 
USING (VALUES 
(1, 'SystemAdministrator', 'enthält alle Rechte'),
(2, 'RightsManager', 'verwaltet Nutzerrollen- und Gruppen'),
(3, 'ContentManager', 'verwaltet Kursinhalte'),
(4, 'SeminarCoordinator', 'verwaltet Seminare'),
(5, 'SeminarTrainer', 'führt Teile von Seminaren durch'),
(6, 'CompanyCoordinator', 'verwaltet Mitarbeiter einer Firma'),
(7, 'SeminarParticipant', 'nimmt an Seminaren teil')
) 
AS Source ([Id], [Role], [Description]) 
ON Target.Id = Source.Id 
WHEN NOT MATCHED BY TARGET THEN 
INSERT ([Id]
       ,[ModifiedDate]
       ,[ModifiedUser]
       ,[Role]
       ,[Description])
VALUES (Source.Id
        ,'2021-11-19 00:00:00.0000'
        ,1
        ,Source.[Role]
        ,Source.[Description])
WHEN MATCHED THEN 
    UPDATE 
        SET [ModifiedDate] = '2021-11-19 00:00:00.0000'
          ,[ModifiedUser] = 1
          ,[Role] = Source.[Role]
          ,[Description] = Source.[Description];
SET IDENTITY_INSERT [core].[UserRightsRole] OFF;
/* core.UserGroup hinzufügen */
SET IDENTITY_INSERT [core].[UserGroup] ON;
MERGE INTO [core].[UserGroup] AS Target 
USING (VALUES 
(1, 'SystemAdministrator', 'enthält alle Rechte'),
(2, 'RightsManager', 'verwaltet Nutzerrollen- und Gruppen'),
(3, 'ContentManager', 'verwaltet Kursinhalte'),
(4, 'SeminarCoordinator', 'verwaltet Seminare'),
(5, 'SeminarTrainer', 'führt Teile von Seminaren durch'),
(6, 'CompanyCoordinator', 'verwaltet Mitarbeiter einer Firma'),
(7, 'SeminarParticipant', 'nimmt an Seminaren teil')
) 
AS Source ([Id], [Group], [Description]) 
ON Target.Id = Source.Id 
WHEN NOT MATCHED BY TARGET THEN 
INSERT ([Id]
       ,[ModifiedDate]
       ,[ModifiedUser]
       ,[Group]
       ,[Description])
VALUES (Source.Id
        ,'2021-11-19 00:00:00.0000'
        ,1
        ,Source.[Group]
        ,Source.[Description])
WHEN MATCHED THEN 
    UPDATE 
        SET [ModifiedDate] = '2021-11-19 00:00:00.0000'
          ,[ModifiedUser] = 1
          ,[Group] = Source.[Group]
          ,[Description] = Source.[Description];
SET IDENTITY_INSERT [core].[UserGroup] OFF;

/* Delete old generated rights */
DELETE FROM [core].[UserRight] WHERE Id >= 100000

/* core.UserRight hinzufügen */
SET IDENTITY_INSERT [core].[UserRight] ON;
MERGE INTO [core].[UserRight] AS Target
USING (VALUES
(100000, 'core_Country_Read', 'Generiertes Leserecht für Tabelle [core].[Country]'),
(100001, 'core_Country_Write', 'Generiertes Schreibrecht für Tabelle [core].[Country]'),
(100002, 'core_Country_Delete', 'Generiertes Löschrecht für Tabelle [core].[Country]'),
(100003, 'core_Country_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[Country_Hist]'),
(100004, 'core_Country_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[Country_Hist]'),
(100005, 'core_Currency_Read', 'Generiertes Leserecht für Tabelle [core].[Currency]'),
(100006, 'core_Currency_Write', 'Generiertes Schreibrecht für Tabelle [core].[Currency]'),
(100007, 'core_Currency_Delete', 'Generiertes Löschrecht für Tabelle [core].[Currency]'),
(100008, 'core_Currency_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[Currency_Hist]'),
(100009, 'core_Currency_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[Currency_Hist]'),
(100010, 'core_DomainType_Read', 'Generiertes Leserecht für Tabelle [core].[DomainType]'),
(100011, 'core_DomainType_Write', 'Generiertes Schreibrecht für Tabelle [core].[DomainType]'),
(100012, 'core_DomainType_Delete', 'Generiertes Löschrecht für Tabelle [core].[DomainType]'),
(100013, 'core_DomainType_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[DomainType_Hist]'),
(100014, 'core_DomainType_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[DomainType_Hist]'),
(100015, 'core_DomainValue_Read', 'Generiertes Leserecht für Tabelle [core].[DomainValue]'),
(100016, 'core_DomainValue_Write', 'Generiertes Schreibrecht für Tabelle [core].[DomainValue]'),
(100017, 'core_DomainValue_Delete', 'Generiertes Löschrecht für Tabelle [core].[DomainValue]'),
(100018, 'core_DomainValue_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[DomainValue_Hist]'),
(100019, 'core_DomainValue_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[DomainValue_Hist]'),
(100020, 'core_GetInsertUpdateDeleteInformation_Execute', 'Generiertes Ausführungsrecht für Skalarwertfunktion [core].[GetInsertUpdateDeleteInformation]'),
(100021, 'core_Product_Read', 'Generiertes Leserecht für Tabelle [core].[Product]'),
(100022, 'core_Product_Write', 'Generiertes Schreibrecht für Tabelle [core].[Product]'),
(100023, 'core_Product_Delete', 'Generiertes Löschrecht für Tabelle [core].[Product]'),
(100024, 'core_Product_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[Product_Hist]'),
(100025, 'core_Product_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[Product_Hist]'),
(100026, 'core_ProductInStock_Read', 'Generiertes Leserecht für paramtrisierte Sicht [core].[ProductInStock]'),
(100027, 'core_ProductsInStock_Read', 'Generiertes Leserecht für Sicht [core].[ProductsInStock]'),
(100028, 'core_SpecialProducts_Read', 'Generiertes Leserecht für paramtrisierte Sicht [core].[SpecialProducts]'),
(100029, 'core_Stock_Read', 'Generiertes Leserecht für Tabelle [core].[Stock]'),
(100030, 'core_Stock_Write', 'Generiertes Schreibrecht für Tabelle [core].[Stock]'),
(100031, 'core_Stock_Delete', 'Generiertes Löschrecht für Tabelle [core].[Stock]'),
(100032, 'core_Stock_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[Stock_Hist]'),
(100033, 'core_Stock_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[Stock_Hist]'),
(100034, 'core_Tenant_Read', 'Generiertes Leserecht für Tabelle [core].[Tenant]'),
(100035, 'core_Tenant_Write', 'Generiertes Schreibrecht für Tabelle [core].[Tenant]'),
(100036, 'core_Tenant_Delete', 'Generiertes Löschrecht für Tabelle [core].[Tenant]'),
(100037, 'core_Tenant_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[Tenant_Hist]'),
(100038, 'core_Tenant_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[Tenant_Hist]'),
(100039, 'core_User_Read', 'Generiertes Leserecht für Tabelle [core].[User]'),
(100040, 'core_User_Write', 'Generiertes Schreibrecht für Tabelle [core].[User]'),
(100041, 'core_User_Delete', 'Generiertes Löschrecht für Tabelle [core].[User]'),
(100042, 'core_User_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[User_Hist]'),
(100043, 'core_User_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[User_Hist]'),
(100044, 'core_UserGroup_Read', 'Generiertes Leserecht für Tabelle [core].[UserGroup]'),
(100045, 'core_UserGroup_Write', 'Generiertes Schreibrecht für Tabelle [core].[UserGroup]'),
(100046, 'core_UserGroup_Delete', 'Generiertes Löschrecht für Tabelle [core].[UserGroup]'),
(100047, 'core_UserGroup_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[UserGroup_Hist]'),
(100048, 'core_UserGroup_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[UserGroup_Hist]'),
(100049, 'core_UserRight_Read', 'Generiertes Leserecht für Tabelle [core].[UserRight]'),
(100050, 'core_UserRight_Write', 'Generiertes Schreibrecht für Tabelle [core].[UserRight]'),
(100051, 'core_UserRight_Delete', 'Generiertes Löschrecht für Tabelle [core].[UserRight]'),
(100052, 'core_UserRight_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[UserRight_Hist]'),
(100053, 'core_UserRight_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[UserRight_Hist]'),
(100054, 'core_UserRightsRole_Read', 'Generiertes Leserecht für Tabelle [core].[UserRightsRole]'),
(100055, 'core_UserRightsRole_Write', 'Generiertes Schreibrecht für Tabelle [core].[UserRightsRole]'),
(100056, 'core_UserRightsRole_Delete', 'Generiertes Löschrecht für Tabelle [core].[UserRightsRole]'),
(100057, 'core_UserRightsRole_Hist_Read', 'Generiertes Leserecht für Tabelle [core].[UserRightsRole_Hist]'),
(100058, 'core_UserRightsRole_Hist_Delete', 'Generiertes Löschrecht für Tabelle [core].[UserRightsRole_Hist]')
)
AS Source ([Id], [Right], [Description])
ON Target.[Right] = Source.[Right]
WHEN NOT MATCHED BY TARGET THEN
INSERT ([Id]
       ,[ModifiedDate]
       ,[ModifiedUser]
       ,[Right]
       ,[Description])
VALUES (Source.Id
        ,'2022-01-01 00:00:00.0000'
        ,1
        ,Source.[Right]
        ,Source.[Description])
WHEN MATCHED THEN
    UPDATE
        SET [ModifiedDate] = '2022-01-01 00:00:00.0000'
          ,[ModifiedUser] = 1
          ,[Right] = Source.[Right]
          ,[Description] = Source.[Description];
SET IDENTITY_INSERT [core].[UserRight] OFF;


/* core.UserRightsRole hinzufügen */
        SET IDENTITY_INSERT [core].[UserRightsRole] ON;
        MERGE INTO [core].[UserRightsRole] AS Target 
        USING (VALUES 

        (1, 'SystemAdministrator', 'Grants all available rights.')
        )

        AS Source ([Id], [Role], [Description]) 
        ON Target.Id = Source.Id 
        WHEN NOT MATCHED BY TARGET THEN 
        INSERT ([Id]
               ,[ModifiedDate]
               ,[ModifiedUser]
               ,[Role]
               ,[Description])
        VALUES (Source.Id
                ,'2017-01-01 00:00:00.0000'
                ,1
                ,Source.[Role]
                ,Source.[Description])
        WHEN MATCHED THEN 
            UPDATE 
                SET [ModifiedDate] = '2017-01-01 00:00:00.0000'
                  ,[ModifiedUser] = 1
                  ,[Role] = Source.[Role]
                  ,[Description] = Source.[Description];
        SET IDENTITY_INSERT [core].[UserRightsRole] OFF;

/* Delete old generated rights */
DELETE FROM [core].[UserRightToUserRightsRole] WHERE Id >= 100000

/* core.UserRightToUserRightsRole hinzufügen */
SET IDENTITY_INSERT [core].[UserRightToUserRightsRole] ON;
MERGE INTO [core].[UserRightToUserRightsRole] AS Target
USING (VALUES
(100000, 1, [core].[GetRightIdFromUserRight]('Systemmonitor')),
(100001, 1, [core].[GetRightIdFromUserRight]('SeminarParticipantBookmarkGet')),
(100002, 1, [core].[GetRightIdFromUserRight]('SeminarParticipantBookmarkSave')),
(100003, 1, [core].[GetRightIdFromUserRight]('SeminarParticipantBookmarkDelete')),
(100004, 1, [core].[GetRightIdFromUserRight]('SeminarParticipantCourseRevGet')),
(100005, 1, [core].[GetRightIdFromUserRight]('SeminarTrainerCourseRevGet')),
(100006, 1, [core].[GetRightIdFromUserRight]('SeminarCoordinatorCourseRevGet')),
(100007, 1, [core].[GetRightIdFromUserRight]('CompanyCoordinatorCourseRevGet')),
(100008, 1, [core].[GetRightIdFromUserRight]('ProductGet')),
(100009, 1, [core].[GetRightIdFromUserRight]('TechnicalCertificatePartGet')),
(100010, 1, [core].[GetRightIdFromUserRight]('SeminarParticipantQuestionnaireGet')),
(100011, 1, [core].[GetRightIdFromUserRight]('SeminarParticipantAnswerSave')),
(100012, 1, [core].[GetRightIdFromUserRight]('SeminarParticipantCourseRevStatusGet')),
(100013, 1, [core].[GetRightIdFromUserRight]('EmployeeInvite')),
(100014, 1, [core].[GetRightIdFromUserRight]('UserGroupAssignmentGet')),
(100015, 1, [core].[GetRightIdFromUserRight]('UserGroupAssignmentSave')),
(100016, 1, [core].[GetRightIdFromUserRight]('UserGroupAssignmentDelete')),
(100017, 1, [core].[GetRightIdFromUserRight]('UserGroupAssignmentGetOwn')),
(100018, 1, [core].[GetRightIdFromUserRight]('UserGroupGet')),
(100019, 1, [core].[GetRightIdFromUserRight]('UserGroupSave')),
(100020, 1, [core].[GetRightIdFromUserRight]('UserGroupDelete')),
(100021, 1, [core].[GetRightIdFromUserRight]('UserRoleAssignmentsGet')),
(100022, 1, [core].[GetRightIdFromUserRight]('UserRoleAssignmentSave')),
(100023, 1, [core].[GetRightIdFromUserRight]('UserRoleAssignmentDelete')),
(100024, 1, [core].[GetRightIdFromUserRight]('UserRolesGet')),
(100025, 1, [core].[GetRightIdFromUserRight]('UserRoleSave')),
(100026, 1, [core].[GetRightIdFromUserRight]('UserRoleDelete')),
(100027, 1, [core].[GetRightIdFromUserRight]('UserRightAssignmentsGet')),
(100028, 1, [core].[GetRightIdFromUserRight]('UserRightAssignmentSave')),
(100029, 1, [core].[GetRightIdFromUserRight]('UserRightAssignmentDelete')),
(100030, 1, [core].[GetRightIdFromUserRight]('UserRightsGet')),
(100031, 1, [core].[GetRightIdFromUserRight]('UnblockUser')),
(100032, 1, [core].[GetRightIdFromUserRight]('UnblockOwnUser')),
(100033, 1, [core].[GetRightIdFromUserRight]('SeminarParticipantSeminarGet')),
(100034, 1, [core].[GetRightIdFromUserRight]('AssignableSeminarGet')),
(100035, 1, [core].[GetRightIdFromUserRight]('SeminarSave')),
(100036, 1, [core].[GetRightIdFromUserRight]('SeminarCoordinatorSeminarGet')),
(100037, 1, [core].[GetRightIdFromUserRight]('SeminarTrainerSeminarGet')),
(100038, 1, [core].[GetRightIdFromUserRight]('SeminarCompanyCoordinatorSeminarGet')),
(100039, 1, [core].[GetRightIdFromUserRight]('SeminarAssignmentGet')),
(100040, 1, [core].[GetRightIdFromUserRight]('SeminarAssignmentSave')),
(100041, 1, [core].[GetRightIdFromUserRight]('SeminarAssignmentDelete')),
(100042, 1, [core].[GetRightIdFromUserRight]('SeminarTrainerGet')),
(100043, 1, [core].[GetRightIdFromUserRight]('SeminarTrainerSave')),
(100044, 1, [core].[GetRightIdFromUserRight]('SeminarTrainerDelete')),
(100045, 1, [core].[GetRightIdFromUserRight]('SeminarRoomGet')),
(100046, 1, [core].[GetRightIdFromUserRight]('SeminarRoomSave')),
(100047, 1, [core].[GetRightIdFromUserRight]('SeminarRoomDelete')),
(100048, 1, [core].[GetRightIdFromUserRight]('SlideGet')),
(100049, 1, [core].[GetRightIdFromUserRight]('EmailChange')),
(100050, 1, [core].[GetRightIdFromUserRight]('PasswortChange')),
(100051, 1, [core].[GetRightIdFromUserRight]('SeminarParticipantCertificateGet')),
(100052, 1, [core].[GetRightIdFromUserRight]('SeminarParticipantPrintableCertificateGet')),
(100053, 1, [core].[GetRightIdFromUserRight]('ContentManagement')),
(100054, 1, [core].[GetRightIdFromUserRight]('TechnicalCertificateGet')),
(100055, 1, [core].[GetRightIdFromUserRight]('TechnicalCertificateToUserGet')),
(100056, 1, [core].[GetRightIdFromUserRight]('TechnicalCertificateToUserSave')),
(100057, 1, [core].[GetRightIdFromUserRight]('TechnicalCertificateToUserDelete')),
(100058, 1, [core].[GetRightIdFromUserRight]('BusinessPartnerGet')),
(100059, 1, [core].[GetRightIdFromUserRight]('SelfDisclosure')),
(100060, 1, [core].[GetRightIdFromUserRight]('ToBeForgotten')),
(100061, 1, [core].[GetRightIdFromUserRight]('OrganizationChart')),
(100062, 1, [core].[GetRightIdFromUserRight]('DashboardEmployee')),
(100063, 1, [core].[GetRightIdFromUserRight]('BusinessPartnerOwnerCertificateGet'))
)
        AS Source ([Id], [UserRightsRoleId], [UserRightId]) 
        ON Target.Id = Source.Id 
        WHEN NOT MATCHED BY TARGET THEN 
        INSERT ([Id]
               ,[ModifiedDate]
               ,[ModifiedUser]
               ,[UserRightId]
               ,[UserRightsRoleId])
        VALUES (Source.Id
                ,'2022-01-01 00:00:00.0000'
                ,1
                ,Source.[UserRightId]
                ,Source.[UserRightsRoleId])
        WHEN MATCHED THEN 
            UPDATE 
                SET [ModifiedDate] = '2017-01-01 00:00:00.0000'
                  ,[ModifiedUser] = 1
                  ,[UserRightId] = Source.[UserRightId]
                  ,[UserRightsRoleId] = Source.[UserRightsRoleId];
        SET IDENTITY_INSERT [core].[UserRightToUserRightsRole] OFF;
        


--DISABLE TRIGGER [core].[Product_HistTrigger] ON [core].[Product]
--:r .\100_Configuration\190_Core_Products.sql
--:r .\100_Configuration\191_Core_Products.sql
--ENABLE TRIGGER [core].[Product_HistTrigger] ON [core].[Product]

/* Constraints einschalten */
ALTER TABLE [core].[Country] WITH CHECK CHECK CONSTRAINT ALL;
ALTER TABLE [core].[Currency] WITH CHECK CHECK CONSTRAINT ALL;
ALTER TABLE [core].[DomainType] WITH CHECK CHECK CONSTRAINT ALL;
ALTER TABLE [core].[DomainValue] WITH CHECK CHECK CONSTRAINT ALL;
ALTER TABLE [core].[Product] WITH CHECK CHECK CONSTRAINT ALL;
ALTER TABLE [core].[Stock] WITH CHECK CHECK CONSTRAINT ALL;
ALTER TABLE [core].[Tenant] WITH CHECK CHECK CONSTRAINT ALL;
ALTER TABLE [core].[User] WITH CHECK CHECK CONSTRAINT ALL;
ALTER TABLE [core].[UserGroup] WITH CHECK CHECK CONSTRAINT ALL;
ALTER TABLE [core].[UserRight] WITH CHECK CHECK CONSTRAINT ALL;
ALTER TABLE [core].[UserRightsRole] WITH CHECK CHECK CONSTRAINT ALL;
GO



GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
